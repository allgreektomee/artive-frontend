"use client";

import Image from "next/image";
import {
  FaInstagram,
  FaYoutube,
  FaUser,
  FaPlus,
  FaEye,
  FaHeart,
} from "react-icons/fa";
import Link from "next/link";
import { useRouter, usePathname } from "next/navigation";
import { useEffect, useState } from "react";

// TypeScript ÌÉÄÏûÖ Ï†ïÏùò
type User = {
  id: number;
  name: string;
  slug: string;
  bio?: string;
  thumbnail_url?: string;
  gallery_title?: string;
  gallery_description?: string;
  total_artworks: number;
  total_views: number;
  instagram_username?: string;
  youtube_channel_id?: string;
  is_public_gallery: boolean;
};

type Artwork = {
  id: number;
  title: string;
  thumbnail_url?: string;
  work_in_progress_url?: string;
  status: "work_in_progress" | "completed" | "archived";
  medium?: string;
  size?: string;
  year?: string;
  view_count: number;
  like_count: number;
  history_count: number;
  created_at: string;
};

export default function GalleryPage() {
  const backEndUrl = process.env.NEXT_PUBLIC_BACKEND_URL;
  const router = useRouter();
  const pathname = usePathname();

  const [galleryUser, setGalleryUser] = useState<User | null>(null);
  const [currentUser, setCurrentUser] = useState<User | null>(null);
  const [artworks, setArtworks] = useState<Artwork[]>([]);
  const [isOwner, setIsOwner] = useState(false);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [mounted, setMounted] = useState(false); // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÎßàÏö¥Ìä∏ Ï≤¥ÌÅ¨

  // ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò ÏÉÅÌÉú
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [hasMore, setHasMore] = useState(false);
  const [loadingMore, setLoadingMore] = useState(false);
  const ITEMS_PER_PAGE = 12; // Ìïú ÌéòÏù¥ÏßÄÎãπ 12Í∞ú

  const currentSlug = pathname?.split("/")[1]; // e.g., '/testuser'

  // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÎßàÏö¥Ìä∏ Ï≤¥ÌÅ¨
  useEffect(() => {
    setMounted(true);
  }, []);

  // ÌòÑÏû¨ Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
  useEffect(() => {
    const fetchCurrentUser = async () => {
      try {
        const token = localStorage.getItem("access_token");
        if (!token) return;

        const res = await fetch(`${backEndUrl}/auth/me`, {
          method: "GET",
          headers: {
            Authorization: `Bearer ${token}`,
            Accept: "application/json",
          },
        });

        if (res.ok) {
          const userData = await res.json();
          setCurrentUser(userData);
          setIsOwner(userData.slug === currentSlug);
          console.log("Current user:", userData); // ÎîîÎ≤ÑÍπÖÏö©
        }
      } catch (err) {
        console.error("ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï°∞Ìöå Ïã§Ìå®:", err);
      }
    };

    fetchCurrentUser();
  }, [currentSlug, backEndUrl]);

  // Í∞§Îü¨Î¶¨ ÏÜåÏú†Ïûê Ï†ïÎ≥¥ÏôÄ ÏûëÌíà Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
  useEffect(() => {
    const fetchGalleryData = async () => {
      if (!currentSlug) return;

      setLoading(true);
      setError(null);

      try {
        // ÌòÑÏû¨ Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©ÏûêÏùò ÌÜ†ÌÅ∞ Í∞ÄÏ†∏Ïò§Í∏∞
        const token = localStorage.getItem("access_token");
        const headers: HeadersInit = { Accept: "application/json" };

        // ÌÜ†ÌÅ∞Ïù¥ ÏûàÏúºÎ©¥ Authorization Ìó§Îçî Ï∂îÍ∞Ä
        if (token) {
          headers.Authorization = `Bearer ${token}`;
        }

        console.log("üîç Í∞§Îü¨Î¶¨ ÏöîÏ≤≠:", {
          url: `${backEndUrl}/artworks/user/${currentSlug}`,
          token: token ? "ÏûàÏùå" : "ÏóÜÏùå",
          currentSlug,
        });

        // Í∞§Îü¨Î¶¨ ÏÜåÏú†ÏûêÏùò ÏûëÌíà Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞ (Ï≤´ ÌéòÏù¥ÏßÄ)
        const artworksRes = await fetch(
          `${backEndUrl}/artworks/user/${currentSlug}?sort_by=created_at&sort_order=desc&page=1&size=${ITEMS_PER_PAGE}`,
          {
            method: "GET",
            headers,
          }
        );

        console.log("üîç Í∞§Îü¨Î¶¨ ÏùëÎãµ:", artworksRes.status);

        if (!artworksRes.ok) {
          console.error(
            "üîç Í∞§Îü¨Î¶¨ ÏóêÎü¨:",
            artworksRes.status,
            await artworksRes.text()
          );
          if (artworksRes.status === 404) {
            setError("Í∞§Îü¨Î¶¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.");
          } else if (artworksRes.status === 403) {
            setError("ÎπÑÍ≥µÍ∞ú Í∞§Îü¨Î¶¨ÏûÖÎãàÎã§. Î°úÍ∑∏Ïù∏ ÏÉÅÌÉúÏôÄ Í∂åÌïúÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.");
          } else {
            setError("Í∞§Îü¨Î¶¨Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
          }
          return;
        }

        const artworksData = await artworksRes.json();
        setArtworks(artworksData.artworks || []);
        setCurrentPage(artworksData.page || 1);
        setTotalPages(artworksData.pages || 1);
        setHasMore(artworksData.has_next || false);

        // Ï≤´ Î≤àÏß∏ ÏûëÌíàÏù¥ ÏûàÎã§Î©¥ Ìï¥Îãπ ÏûëÌíàÏùò ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º ÌÜµÌï¥ Í∞§Îü¨Î¶¨ ÏÜåÏú†Ïûê Ï†ïÎ≥¥ Ï∂îÏ†ï
        // Ïã§Ï†úÎ°úÎäî Î≥ÑÎèÑÏùò ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ APIÍ∞Ä ÌïÑÏöîÌïòÏßÄÎßå, ÏûÑÏãúÎ°ú ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
        if (artworksData.artworks && artworksData.artworks.length > 0) {
          setGalleryUser({
            id: 1,
            name: currentSlug.toUpperCase(),
            slug: currentSlug,
            bio: "Contemporary abstract artist exploring color and form.",
            gallery_title: `${currentSlug.toUpperCase()} Gallery`,
            gallery_description: "ÏûëÌíàÏùÑ ÌÜµÌï¥ ÏÉâÏ±ÑÏôÄ ÌòïÌÉúÏùò Ï°∞ÌôîÎ•º ÌÉêÍµ¨Ìï©ÎãàÎã§.",
            total_artworks: artworksData.total || 0,
            total_views: artworksData.artworks.reduce(
              (sum: number, art: Artwork) => sum + art.view_count,
              0
            ),
            is_public_gallery: true,
          });
        }
      } catch (err) {
        console.error("Í∞§Îü¨Î¶¨ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®:", err);
        setError("ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
      } finally {
        setLoading(false);
      }
    };

    fetchGalleryData();
  }, [currentSlug, backEndUrl]);

  // Load More Ìï®Ïàò
  const loadMoreArtworks = async () => {
    if (!hasMore || loadingMore || !currentSlug) return;

    setLoadingMore(true);

    try {
      const token = localStorage.getItem("access_token");
      const headers: HeadersInit = { Accept: "application/json" };

      if (token) {
        headers.Authorization = `Bearer ${token}`;
      }

      const nextPage = currentPage + 1;
      const artworksRes = await fetch(
        `${backEndUrl}/artworks/user/${currentSlug}?sort_by=created_at&sort_order=desc&page=${nextPage}&size=${ITEMS_PER_PAGE}`,
        {
          method: "GET",
          headers,
        }
      );

      if (artworksRes.ok) {
        const artworksData = await artworksRes.json();

        // Í∏∞Ï°¥ ÏûëÌíàÏóê ÏÉà ÏûëÌíàÎì§ Ï∂îÍ∞Ä
        setArtworks((prev) => [...prev, ...(artworksData.artworks || [])]);
        setCurrentPage(artworksData.page || nextPage);
        setHasMore(artworksData.has_next || false);
      }
    } catch (err) {
      console.error("Ï∂îÍ∞Ä ÏûëÌíà Î°úÎî© Ïã§Ìå®:", err);
    } finally {
      setLoadingMore(false);
    }
  };

  const handleProfileClick = () => {
    router.push("/edit-profile");
  };

  const handleAddArtwork = () => {
    router.push("/artworks/new");
  };

  const getDisplayImage = (artwork: Artwork) => {
    // ÏûëÏóÖ Ï§ëÏù¥Î©¥ work_in_progress_url, ÏôÑÏÑ±ÎêòÎ©¥ thumbnail_url
    if (artwork.status === "work_in_progress" && artwork.work_in_progress_url) {
      return artwork.work_in_progress_url;
    }
    return (
      artwork.thumbnail_url ||
      "https://via.placeholder.com/300x200?text=No+Image"
    );
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "work_in_progress":
        return (
          <span className="absolute top-2 left-2 bg-yellow-500 text-white text-xs px-2 py-1 rounded">
            WIP
          </span>
        );
      case "completed":
        return (
          <span className="absolute top-2 left-2 bg-green-500 text-white text-xs px-2 py-1 rounded">
            Done
          </span>
        );
      case "archived":
        return (
          <span className="absolute top-2 left-2 bg-gray-500 text-white text-xs px-2 py-1 rounded">
            Archived
          </span>
        );
      default:
        return null;
    }
  };

  if (!mounted) {
    return (
      <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-8 text-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900 mx-auto"></div>
        <p className="mt-4 text-gray-600">Loading...</p>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="max-w-5xl mx-auto px-4 py-8 text-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900 mx-auto"></div>
        <p className="mt-4 text-gray-600">Loading gallery...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="max-w-5xl mx-auto px-4 py-8 text-center">
        <p className="text-red-600 text-lg">{error}</p>
        <Link
          href="/"
          className="mt-4 inline-block text-blue-600 hover:underline"
        >
          Back to Home
        </Link>
      </div>
    );
  }

  return (
    <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-4 text-gray-900">
      {/* Ìó§Îçî */}
      <div className="flex justify-between items-center mb-8">
        <Link
          href="/"
          className="text-2xl font-semibold text-gray-800 hover:text-black"
        >
          artive.com
        </Link>
        <div className="flex items-center space-x-4">
          {isOwner && (
            <button
              onClick={handleAddArtwork}
              className="flex items-center space-x-1 bg-black text-white px-4 py-2 rounded hover:bg-gray-800 transition-colors"
            >
              <FaPlus className="text-sm" />
              <span>Add Artwork</span>
            </button>
          )}
        </div>
      </div>

      {/* ÏûëÍ∞Ä ÏÜåÍ∞ú */}
      <div className="space-y-4 py-6 border-b border-gray-200">
        {/* Ï†úÎ™©Í≥º ÏÑ§Î™Ö */}
        <div>
          <h1 className="text-2xl sm:text-3xl font-bold mb-2">
            {galleryUser?.gallery_title ||
              galleryUser?.name ||
              currentSlug.toUpperCase()}
          </h1>
          <p className="text-gray-600 text-sm sm:text-base">
            {galleryUser?.gallery_description ||
              galleryUser?.bio ||
              "Contemporary abstract artist exploring color and form."}
          </p>
        </div>

        {/* ÌÜµÍ≥ÑÏôÄ ÏÜåÏÖúÎØ∏ÎîîÏñ¥Î•º Ìïú Ï§ÑÏóê */}
        <div className="flex justify-between items-center gap-4">
          {/* ÌÜµÍ≥Ñ Ï†ïÎ≥¥ - ÏôºÏ™Ω Î∞∞Ïπò */}
          <div className="flex items-center gap-4 sm:gap-6 text-sm text-gray-500">
            <span className="font-medium">
              {galleryUser?.total_artworks || artworks.length} Artworks
            </span>
            <span className="font-medium">
              {galleryUser?.total_views || 0} Total Views
            </span>
          </div>

          {/* ÏÜåÏÖúÎØ∏ÎîîÏñ¥ ÏïÑÏù¥ÏΩòÎì§ - Ïò§Î•∏Ï™Ω Î∞∞Ïπò */}
          <div className="flex items-center space-x-2 sm:space-x-3">
            <a
              href={
                galleryUser?.youtube_channel_id
                  ? `https://youtube.com/channel/${galleryUser.youtube_channel_id}`
                  : "https://youtube.com/"
              }
              target="_blank"
              rel="noopener noreferrer"
              className="text-gray-600 hover:text-red-600 transition-colors"
            >
              <FaYoutube className="text-lg sm:text-xl md:text-2xl" />
            </a>
            <a
              href={
                galleryUser?.instagram_username
                  ? `https://instagram.com/${galleryUser.instagram_username}`
                  : "https://instagram.com/"
              }
              target="_blank"
              rel="noopener noreferrer"
              className="text-gray-600 hover:text-pink-600 transition-colors"
            >
              <FaInstagram className="text-lg sm:text-xl md:text-2xl" />
            </a>
            {isOwner && (
              <button
                onClick={handleProfileClick}
                title="Edit Profile"
                className="text-gray-600 hover:text-black transition-colors"
              >
                <FaUser className="text-lg sm:text-xl md:text-2xl" />
              </button>
            )}
          </div>
        </div>
      </div>

      {/* ÏûëÌíà Î™©Î°ù */}
      <div id="artworks" className="py-6 sm:py-8">
        <div className="flex justify-between items-center mb-4 sm:mb-6">
          <h2 className="text-xl sm:text-2xl font-semibold">Artworks</h2>
          <div className="text-sm text-gray-500">
            {artworks.length} artworks
          </div>
        </div>

        {artworks.length === 0 ? (
          <div className="text-center py-12">
            <p className="text-gray-500 mb-4">No artworks yet.</p>
            {isOwner && (
              <button
                onClick={handleAddArtwork}
                className="bg-black text-white px-6 py-2 rounded hover:bg-gray-800 transition-colors"
              >
                Add Your First Artwork
              </button>
            )}
          </div>
        ) : (
          <>
            <div className="columns-1 sm:columns-2 lg:columns-3 gap-3 sm:gap-4 md:gap-6 space-y-3 sm:space-y-4 md:space-y-6">
              {artworks.map((artwork) => (
                <Link
                  key={artwork.id}
                  href={`/artworks/${artwork.id}`}
                  className="group block relative bg-transparent rounded-lg overflow-hidden shadow-sm hover:shadow-lg transition-all duration-300 break-inside-avoid mb-3 sm:mb-4 md:mb-6"
                >
                  <div className="relative w-full overflow-hidden bg-gray-100 rounded-lg">
                    <img
                      src={getDisplayImage(artwork)}
                      alt={artwork.title}
                      className="w-full h-auto object-cover group-hover:scale-105 transition-transform duration-300 block"
                      loading="lazy"
                      onError={(e) => {
                        console.error(
                          "Ïù¥ÎØ∏ÏßÄ Î°úÎî© Ïã§Ìå®:",
                          artwork.title,
                          getDisplayImage(artwork)
                        );
                        e.currentTarget.src =
                          "https://via.placeholder.com/400x600/f0f0f0/999999?text=Image+Not+Found";
                      }}
                      onLoad={() =>
                        console.log("Ïù¥ÎØ∏ÏßÄ Î°úÎî© ÏÑ±Í≥µ:", artwork.title)
                      }
                    />

                    {/* ÏÉÅÌÉú Î∞∞ÏßÄ */}
                    {getStatusBadge(artwork.status)}

                    {/* Ìò∏Î≤Ñ Ïò§Î≤ÑÎ†àÏù¥ */}
                    <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-all duration-300 flex items-end rounded-lg">
                      <div className="w-full p-3 text-white transform translate-y-full group-hover:translate-y-0 transition-transform duration-300">
                        <div className="flex justify-between items-center text-sm">
                          <div className="flex space-x-3">
                            <span className="flex items-center space-x-1">
                              <FaEye className="text-xs" />
                              <span>{artwork.view_count}</span>
                            </span>
                            <span className="flex items-center space-x-1">
                              <FaHeart className="text-xs" />
                              <span>{artwork.like_count}</span>
                            </span>
                          </div>
                          <span className="text-xs">{artwork.year}</span>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* ÏûëÌíà Ï†ïÎ≥¥ */}
                  <div className="p-3 bg-white rounded-b-lg">
                    <h3 className="font-medium text-sm truncate group-hover:text-blue-600 transition-colors">
                      {artwork.title}
                    </h3>
                    <div className="flex justify-between items-center mt-1 text-xs text-gray-500">
                      <span>{artwork.medium}</span>
                      <span>{artwork.size}</span>
                    </div>
                    {artwork.history_count > 0 && (
                      <div className="mt-2 text-xs text-blue-600">
                        {artwork.history_count} Process
                      </div>
                    )}
                  </div>
                </Link>
              ))}
            </div>

            {/* Load More Î≤ÑÌäº */}
            {hasMore && (
              <div className="text-center mt-8 sm:mt-12">
                <button
                  onClick={loadMoreArtworks}
                  disabled={loadingMore}
                  className="bg-gray-100 hover:bg-gray-200 text-gray-700 px-8 py-3 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {loadingMore ? (
                    <div className="flex items-center space-x-2">
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-gray-700"></div>
                      <span>Loading...</span>
                    </div>
                  ) : (
                    `Load More (${Math.min(
                      ITEMS_PER_PAGE,
                      (galleryUser?.total_artworks || 0) - artworks.length
                    )} more)`
                  )}
                </button>
                <p className="text-sm text-gray-500 mt-2">
                  Showing {artworks.length} of{" "}
                  {galleryUser?.total_artworks || 0} artworks
                </p>
              </div>
            )}
          </>
        )}
      </div>
      {/* About Section */}
      <div id="about" className="py-12 sm:py-16 border-t border-gray-200">
        {/* Artist Statement */}
        <div className="mb-12 sm:mb-16">
          <h2 className="text-xl sm:text-2xl font-semibold mb-6 sm:mb-8">
            About the Artist
          </h2>
          <div className="prose prose-lg max-w-4xl">
            <p className="text-gray-700 leading-relaxed mb-4 text-sm sm:text-base">
              {galleryUser?.bio ||
                "I am a contemporary abstract artist based in Seoul, exploring the infinite possibilities of color, form, and emotion. My work delves into the intersection of traditional Korean aesthetics and modern artistic expression."}
            </p>
            <p className="text-gray-700 leading-relaxed text-sm sm:text-base">
              Through my paintings, I seek to capture the ephemeral moments of
              beauty that surround us daily, transforming them into visual
              narratives that speak to the universal human experience.
            </p>
          </div>
        </div>

        {/* YouTube Video Section */}
        <div className="mb-12 sm:mb-16">
          <h3 className="text-lg sm:text-xl font-semibold mb-4 sm:mb-6">
            Studio Process
          </h3>
          <div className="w-full max-w-4xl">
            <div className="relative w-full h-0 pb-[56.25%] rounded-lg overflow-hidden bg-gray-100">
              <iframe
                className="absolute top-0 left-0 w-full h-full"
                src="https://www.youtube.com/embed/dQw4w9WgXcQ?si=example"
                title="Artist Studio Process"
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                allowFullScreen
              />
            </div>
            <p className="text-xs sm:text-sm text-gray-600 mt-2">
              Watch me create art in my Seoul studio
            </p>
          </div>
        </div>

        {/* Q&A Section */}
        <div className="mb-12 sm:mb-16">
          <h3 className="text-lg sm:text-xl font-semibold mb-6 sm:mb-8">
            Artist Interview
          </h3>
          <div className="space-y-6 sm:space-y-8">
            <div className="border-l-4 border-blue-500 pl-4 sm:pl-6">
              <h4 className="font-medium text-gray-900 mb-2">
                Q: ÏûëÍ∞ÄÎãòÏùò ÏòàÏà†Ï†Å ÏòÅÍ∞êÏùÄ Î¨¥ÏóáÏóêÏÑú Ïò§ÎÇòÏöî?
              </h4>
              <p className="text-gray-700 text-sm sm:text-base">
                ÏÑúÏö∏Ïùò Ïó≠ÎèôÏ†ÅÏù∏ ÏóêÎÑàÏßÄÏôÄ Ï°∞Ïö©Ìïú ÏÑ±Ï∞∞Ïùò ÏàúÍ∞ÑÎì§Ïù¥ Í≤∞Ìï©ÎêòÏñ¥ ÏòÅÍ∞êÏùÑ
                ÏñªÏäµÎãàÎã§. ÌïòÎ£® Ï¢ÖÏùº Î≥ÄÌôîÌïòÎäî ÎπõÏù¥ ÎßåÎì§Ïñ¥ÎÇ¥Îäî Îã§ÏñëÌïú Î∂ÑÏúÑÍ∏∞ÏôÄ
                Í∞êÏ†ïÎì§Ïóê Îß§Î£åÎêòÏñ¥, Ïù¥Î•º Ï†ú ÏûëÌíàÏóê Îã¥ÏïÑÎÇ¥Î†§Í≥† ÎÖ∏Î†•ÌïòÍ≥† ÏûàÏñ¥Ïöî.
              </p>
            </div>

            <div className="border-l-4 border-green-500 pl-4 sm:pl-6">
              <h4 className="font-medium text-gray-900 mb-2">
                Q: ÏûëÍ∞ÄÎãòÏùò ÏûëÏóÖ Ïä§ÌÉÄÏùºÏùÑ Ïñ¥ÎñªÍ≤å ÏÑ§Î™ÖÌïòÏãúÍ≤†Ïñ¥Ïöî?
              </h4>
              <p className="text-gray-700 text-sm sm:text-base">
                Ï£ºÎ°ú ÏïÑÌÅ¨Î¶¥Í≥º ÌòºÌï© Îß§Ï≤¥Î•º ÏÇ¨Ïö©ÌïòÏó¨ ÎèôÏÑúÏñëÏùò ÏòàÏà†Ï†Å Ï†ÑÌÜµÏùÑ ÏúµÌï©Ìïú
                Ï∂îÏÉÅ ÏûëÌíàÏùÑ ÎßåÎì§Í≥† ÏûàÏäµÎãàÎã§. ÎåÄÎã¥Ìïú ÏÉâÏ±Ñ ÏÑ†ÌÉùÍ≥º Ï∫îÎ≤ÑÏä§Î•º
                Í∞ÄÎ°úÏßàÎü¨ ÌùêÎ•¥Îäî ÎìØÌïú Ïó≠ÎèôÏ†ÅÏù∏ ÌòïÌÉúÍ∞Ä Ï†ú Ïä§ÌÉÄÏùºÏùò ÌäπÏßïÏù¥ÎùºÍ≥† Ìï†
                Ïàò ÏûàÏñ¥Ïöî.
              </p>
            </div>

            <div className="border-l-4 border-purple-500 pl-4 sm:pl-6">
              <h4 className="font-medium text-gray-900 mb-2">
                Q: ÏûëÌíàÏùÑ ÌÜµÌï¥ Ï†ÑÎã¨ÌïòÍ≥†Ïûê ÌïòÎäî Î©îÏãúÏßÄÍ∞Ä ÏûàÎã§Î©¥?
              </h4>
              <p className="text-gray-700 text-sm sm:text-base">
                Í¥ÄÎûåÏûêÎì§Ïù¥ Ï†ú ÏûëÌíàÍ≥º Í∞ÅÏûêÎßåÏùò Í∞êÏ†ïÏ†Å Ïó∞Í≤∞Í≥†Î¶¨Î•º Ï∞æÏïòÏúºÎ©¥
                Ï¢ãÍ≤†Ïñ¥Ïöî. ÏòàÏà†ÏùÄ ÏûëÍ∞ÄÏùò ÎÇ¥Î©¥ ÏÑ∏Í≥ÑÏôÄ Í¥ÄÏ∞∞ÏûêÏùò Í∞úÏù∏Ï†Å Í≤ΩÌóò ÏÇ¨Ïù¥Î•º
                ÏûáÎäî Îã§Î¶¨ Ïó≠Ìï†ÏùÑ Ìï¥Ïïº ÌïúÎã§Í≥† ÏÉùÍ∞ÅÌï©ÎãàÎã§. Í∞ÅÍ∞ÅÏùò Í∑∏Î¶ºÏùÄ ÌÉêÌóòÌïòÍ≥†,
                ÎäêÎÅºÍ≥†, Î∞úÍ≤¨ÌïòÎùºÎäî Ï¥àÎåÄÏû•Ïù¥ÏóêÏöî.
              </p>
            </div>

            <div className="border-l-4 border-red-500 pl-4 sm:pl-6">
              <h4 className="font-medium text-gray-900 mb-2">
                Q: ÏûëÍ∞ÄÎãòÏùò ÏûëÌíàÏùÄ Ïñ¥ÎîîÏÑú ÎßåÎÇ† Ïàò ÏûàÎÇòÏöî?
              </h4>
              <p className="text-gray-700 text-sm sm:text-base">
                ÏÑúÏö∏ Ï†ÑÏó≠Ïùò Í∞§Îü¨Î¶¨ÏóêÏÑú Ï†ïÍ∏∞Ï†ÅÏúºÎ°ú Ï†ÑÏãúÌïòÍ≥† ÏûàÏúºÎ©∞, Ïó¨Îü¨ Í∞úÏù∏
                Ïª¨Î†âÏÖòÏùò ÏùºÎ∂ÄÏù¥Í∏∞ÎèÑ Ìï©ÎãàÎã§. Í∑∏Î£π Ï†ÑÏãúÏôÄ ÏïÑÌä∏ÌéòÏñ¥ÏóêÎèÑ Ï∞∏Ïó¨ÌïòÍ≥†
                ÏûàÏñ¥Ïöî. Îã§Í∞ÄÏò§Îäî Ï†ÑÏãú ÏÜåÏãùÏùÄ ÏÜåÏÖúÎØ∏ÎîîÏñ¥Î•º ÌÜµÌï¥ ÌôïÏù∏ÌïòÏã§ Ïàò
                ÏûàÏäµÎãàÎã§.
              </p>
            </div>
          </div>
        </div>

        {/* Exhibitions & Recognition */}
        <div>
          <h3 className="text-lg sm:text-xl font-semibold mb-6 sm:mb-8">
            Exhibitions & Recognition
          </h3>
          <div className="grid md:grid-cols-2 gap-8 sm:gap-12">
            <div>
              <h4 className="font-medium mb-4 sm:mb-6">Recent Exhibitions</h4>
              <ul className="space-y-3 text-gray-700 text-sm sm:text-base">
                <li>‚Ä¢ "Colors of Seoul" - Gallery Modern, 2024</li>
                <li>‚Ä¢ "Abstract Emotions" - Art Space K, 2023</li>
                <li>‚Ä¢ Group Exhibition - Seoul Arts Center, 2023</li>
                <li>‚Ä¢ "New Visions" - Contemporary Gallery, 2022</li>
              </ul>
            </div>
            <div>
              <h4 className="font-medium mb-4 sm:mb-6">Awards & Recognition</h4>
              <ul className="space-y-3 text-gray-700 text-sm sm:text-base">
                <li>‚Ä¢ Emerging Artist Award - Seoul Art Fair, 2024</li>
                <li>‚Ä¢ Featured Artist - Korean Art Magazine, 2023</li>
                <li>‚Ä¢ Excellence Award - National Art Competition, 2022</li>
                <li>‚Ä¢ Rising Star - Contemporary Art Review, 2021</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
