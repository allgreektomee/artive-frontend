// app/artworks/[id]/page.tsx
"use client";
import React, { useState, useEffect } from "react";
import { useParams, useRouter } from "next/navigation";

// Ïª¥Ìè¨ÎÑåÌä∏ import
import ArtworkDetailHeader from "@/components/artwork-detail/ArtworkDetailHeader";
import ArtworkMainInfo from "@/components/artwork-detail/ArtworkMainInfo";
import ArtworkHistoryTimeline from "@/components/artwork-detail/ArtworkHistoryTimeline";
import ImageModal from "@/components/artwork-detail/ImageModal";
import AddHistoryModal from "@/components/artwork-detail/AddHistoryModal";
import EditDescriptionModal from "@/components/artwork-detail/EditDescriptionModal";

import { authUtils } from "@/utils/auth";

interface Artist {
  id: number;
  username: string;
  name: string;
  slug: string;
  profile_image?: string;
  bio?: string;
}

interface Artwork {
  id: number;
  title: string;
  title_en?: string;
  description?: string;
  description_en?: string;
  medium?: string;
  size?: string;
  year?: number;
  location?: string;
  price?: number;
  currency?: string;
  is_for_sale: boolean;
  status: "work_in_progress" | "completed" | "archived";
  thumbnail_url?: string;
  work_in_progress_url?: string;
  view_count: number;
  like_count: number;
  created_at: string;
  updated_at: string;
  artist: Artist;
  images: ArtworkImage[];
  histories: ArtworkHistory[];
  tags?: string[];
  links?: Array<{ title: string; url: string }>;
  youtube_urls?: string[];
  user?: any;
  user_id?: number;
  artist_name?: string;
}

interface ArtworkImage {
  id: number;
  image_url: string;
  order: number;
  caption?: string;
}

interface ArtworkHistory {
  id: number;
  title: string;
  description?: string;
  content?: string;
  media_url?: string;
  media_type: "image" | "video" | "document" | "text" | "youtube";
  recorded_at?: string;
  work_date?: string;
  created_at: string;
}

export default function ArtworkDetailPage() {
  const params = useParams();
  const router = useRouter();
  const artworkId = params?.id as string;
  const backEndUrl = process.env.NEXT_PUBLIC_BACKEND_URL;

  // ÏÉÅÌÉú Í¥ÄÎ¶¨
  const [artwork, setArtwork] = useState<Artwork | null>(null);
  const [histories, setHistories] = useState<ArtworkHistory[]>([]);

  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showTitleInHeader, setShowTitleInHeader] = useState(false);
  const [currentUser, setCurrentUser] = useState<any>(null);
  const [editingHistory, setEditingHistory] = useState<ArtworkHistory | null>(
    null
  );

  // Modal states
  const [showImageModal, setShowImageModal] = useState(false);
  const [showAddHistoryModal, setShowAddHistoryModal] = useState(false);
  const [showEditDescriptionModal, setShowEditDescriptionModal] =
    useState(false);
  const [selectedImage, setSelectedImage] = useState({
    url: "",
    title: "",
    subtitle: "",
  });

  // ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
  useEffect(() => {
    const fetchCurrentUser = async () => {
      try {
        const token = authUtils.getToken();
        if (!token) {
          console.log("‚ùå ÌÜ†ÌÅ∞Ïù¥ ÏóÜÏäµÎãàÎã§");
          return;
        }

        const response = await fetch(`${backEndUrl}/api/auth/me`, {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        });

        if (response.ok) {
          const userData = await response.json();
          console.log("‚úÖ ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥:", userData);
          setCurrentUser(userData);
        } else {
          console.error("‚ùå ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏùëÎãµ Ïã§Ìå®:", response.status);
          // localStorageÏóêÏÑú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏãúÎèÑ
          const storedUser = localStorage.getItem("user");
          if (storedUser) {
            const parsedUser = JSON.parse(storedUser);
            console.log("üì¶ localStorage ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥:", parsedUser);
            setCurrentUser(parsedUser);
          }
        }
      } catch (err) {
        console.error("ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:", err);
        // localStorageÏóêÏÑú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏãúÎèÑ
        const storedUser = localStorage.getItem("user");
        if (storedUser) {
          const parsedUser = JSON.parse(storedUser);
          console.log("üì¶ localStorage ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ (fallback):", parsedUser);
          setCurrentUser(parsedUser);
        }
      }
    };

    fetchCurrentUser();
  }, [backEndUrl]);

  // ÌûàÏä§ÌÜ†Î¶¨ ÏàòÏ†ï Ìï®Ïàò
  const handleEditHistory = (history: ArtworkHistory) => {
    setEditingHistory(history);
    setShowAddHistoryModal(true); // Í∞ôÏùÄ Î™®Îã¨ÏùÑ ÏàòÏ†ïÏö©ÏúºÎ°ú Ïû¨ÏÇ¨Ïö©
  };

  // ÏûëÌíà ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
  useEffect(() => {
    const fetchArtworkDetail = async () => {
      if (!artworkId) return;

      try {
        setLoading(true);

        // ÎîîÎ≤ÑÍπÖ Ï†ïÎ≥¥ Ï∂úÎ†•
        console.log("üîç Î∞±ÏóîÎìú URL:", backEndUrl);
        console.log("üîç ÏöîÏ≤≠ URL:", `${backEndUrl}/api/artworks/${artworkId}`);

        const token = authUtils.getToken();
        const headers: HeadersInit = { Accept: "application/json" };

        if (token) {
          headers.Authorization = `Bearer ${token}`;
        }

        console.log("üîç ÏöîÏ≤≠ Ìó§Îçî:", headers);

        // ÏûëÌíà ÏÉÅÏÑ∏ Ï†ïÎ≥¥ API Ìò∏Ï∂ú
        const artworkRes = await fetch(
          `${backEndUrl}/api/artworks/${artworkId}`,
          {
            method: "GET",
            headers,
          }
        );

        console.log("üéØ ÏùëÎãµ ÏÉÅÌÉú:", artworkRes.status);
        console.log("üéØ ÏùëÎãµ OK:", artworkRes.ok);

        if (!artworkRes.ok) {
          throw new Error(`ÏûëÌíàÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§: ${artworkRes.status}`);
        }

        const artworkData = await artworkRes.json();
        console.log("üéØ Î∞õÏùÄ ÏûëÌíà Îç∞Ïù¥ÌÑ∞:", artworkData);
        setArtwork(artworkData);

        // ÌûàÏä§ÌÜ†Î¶¨ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
        const historiesRes = await fetch(
          `${backEndUrl}/api/artworks/${artworkId}/histories`,
          {
            method: "GET",
            headers,
          }
        );

        if (historiesRes.ok) {
          const historiesData = await historiesRes.json();
          setHistories(historiesData);
        }
      } catch (err: any) {
        console.error("üö® ÏÉÅÏÑ∏ ÏóêÎü¨:", err);
        console.error("üö® ÏóêÎü¨ ÌÉÄÏûÖ:", typeof err);
        console.error("üö® ÏóêÎü¨ Î©îÏãúÏßÄ:", err.message);
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchArtworkDetail();
  }, [artworkId, backEndUrl]);

  // ÌûàÏä§ÌÜ†Î¶¨ Ï∂îÍ∞Ä Ìï®Ïàò
  const handleAddHistory = async (historyData: any) => {
    try {
      const token = authUtils.getToken();

      // work_dateÎ•º datetime ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
      let formattedWorkDate = null;
      if (historyData.work_date) {
        // "2025-08-19" -> "2025-08-19T00:00:00"
        formattedWorkDate = `${historyData.work_date}T00:00:00`;
      }

      // Îπà Í∞í Ï≤òÎ¶¨ - Îπà Î¨∏ÏûêÏó¥ÏùÑ nullÎ°ú Î≥ÄÌôò
      const requestData = {
        title: historyData.title,
        content: historyData.content,
        media_type: historyData.media_type || "text",
        media_url: historyData.media_url || null,
        work_date: formattedWorkDate,
        history_type: "manual",
      };

      // Îπà Î¨∏ÏûêÏó¥ Ï≤¥ÌÅ¨
      if (requestData.media_url === "") requestData.media_url = null;
      if (requestData.work_date === "") requestData.work_date = null;

      console.log("üì§ Ï†ÑÏÜ° Îç∞Ïù¥ÌÑ∞:", requestData);

      const response = await fetch(
        `${backEndUrl}/api/artworks/${artworkId}/histories`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify(requestData),
        }
      );

      console.log("üì• ÏùëÎãµ ÏÉÅÌÉú:", response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error("‚ùå ÏóêÎü¨ ÏùëÎãµ:", errorText);

        // JSON ÌååÏã± ÏãúÎèÑ
        try {
          const errorData = JSON.parse(errorText);
          console.error("‚ùå ÏóêÎü¨ ÏÉÅÏÑ∏:", errorData);
          throw new Error(errorData.detail || "ÌûàÏä§ÌÜ†Î¶¨ Ï∂îÍ∞Ä Ïã§Ìå®");
        } catch (e) {
          throw new Error(`ÌûàÏä§ÌÜ†Î¶¨ Ï∂îÍ∞Ä Ïã§Ìå®: ${response.status}`);
        }
      }

      const newHistory = await response.json();
      console.log("‚úÖ ÌûàÏä§ÌÜ†Î¶¨ Ï∂îÍ∞Ä ÏÑ±Í≥µ:", newHistory);

      setHistories((prev) => [...prev, newHistory]);
      setShowAddHistoryModal(false);
    } catch (err: any) {
      console.error("ÌûàÏä§ÌÜ†Î¶¨ Ï∂îÍ∞Ä Ïò§Î•ò:", err);
      alert(err.message || "ÌûàÏä§ÌÜ†Î¶¨ Ï∂îÍ∞ÄÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
    }
  };

  // Ïä§ÌÅ¨Î°§ Í∞êÏßÄ
  useEffect(() => {
    const handleScroll = () => {
      const titleElement = document.getElementById("artwork-title");
      if (titleElement) {
        const rect = titleElement.getBoundingClientRect();
        setShowTitleInHeader(rect.bottom < 100);
      }
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  // Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨Îì§
  const handleBack = () => {
    window.history.back();
  };

  const handleImageClick = (
    imageUrl: string,
    title?: string,
    subtitle?: string
  ) => {
    setSelectedImage({
      url: imageUrl,
      title: title || artwork?.title || "",
      subtitle: subtitle || `${artwork?.size} ‚Ä¢ ${artwork?.medium}`,
    });
    setShowImageModal(true);
  };

  const handleMainImageClick = () => {
    handleImageClick(
      artwork?.thumbnail_url || "",
      artwork?.title,
      `${artwork?.size} ‚Ä¢ ${artwork?.medium}`
    );
  };

  // ÌûàÏä§ÌÜ†Î¶¨ ÏÇ≠Ï†ú Ìï®Ïàò
  const handleDeleteHistory = async (historyId: number) => {
    try {
      const token = authUtils.getToken();

      const response = await fetch(
        `${backEndUrl}/api/artworks/${artworkId}/histories/${historyId}`,
        {
          method: "DELETE",
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      if (response.ok) {
        setHistories((prev) => prev.filter((h) => h.id !== historyId));
        console.log("ÌûàÏä§ÌÜ†Î¶¨ ÏÇ≠Ï†ú ÏÑ±Í≥µ");
      } else {
        throw new Error("ÌûàÏä§ÌÜ†Î¶¨ ÏÇ≠Ï†ú Ïã§Ìå®");
      }
    } catch (err) {
      console.error("ÌûàÏä§ÌÜ†Î¶¨ ÏÇ≠Ï†ú Ïò§Î•ò:", err);
      alert("ÌûàÏä§ÌÜ†Î¶¨ ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
    }
  };

  // ÏûëÌíà ÏÑ§Î™Ö ÏàòÏ†ï Ìï®Ïàò
  const handleUpdateDescription = async (data: any) => {
    try {
      const token = authUtils.getToken();

      const response = await fetch(`${backEndUrl}/api/artworks/${artworkId}`, {
        method: "PUT", // PATCH ‚Üí PUTÏúºÎ°ú Î≥ÄÍ≤Ω
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          title: data.title, // Ïù¥ Ï§Ñ Ï∂îÍ∞Ä
          description: data.description,
          links: data.links,
          youtube_urls: data.youtube_urls,
        }),
      });

      if (!response.ok) {
        throw new Error("ÏàòÏ†ïÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
      }

      const updatedArtwork = await response.json();
      setArtwork(updatedArtwork);
      alert("ÏûëÌíà Ï†ïÎ≥¥Í∞Ä ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§.");
    } catch (err) {
      console.error("ÏàòÏ†ï Ïò§Î•ò:", err);
      throw err;
    }
  };

  // Artwork ÏÇ≠Ï†ú Ìï∏Îì§Îü¨
  const handleDeleteArtwork = () => {
    // ÏÇ≠Ï†ú ÏÑ±Í≥µ ÌõÑ ÏÇ¨Ïö©ÏûêÏùò Í∞§Îü¨Î¶¨Î°ú Ïù¥Îèô
    // ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÏùò slugÎÇò usernameÏùÑ ÏÇ¨Ïö©
    if (currentUser?.username) {
      router.push(`/${currentUser.username}`);
    } else if (currentUser?.slug) {
      router.push(`/${currentUser.slug}`);
    } else if (artwork?.user?.username) {
      router.push(`/${artwork.user.username}`);
    } else if (artwork?.user?.slug) {
      router.push(`/${artwork.user.slug}`);
    } else {
      // fallback - ÌôàÏúºÎ°ú Ïù¥Îèô
      router.push("/");
    }
    alert("ÏûëÌíàÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§");
  };

  // Î°úÎî© ÏÉÅÌÉú
  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900"></div>
      </div>
    );
  }

  // ÏóêÎü¨ ÏÉÅÌÉú
  if (error || !artwork) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center">
        <p className="text-red-600 text-lg mb-4">
          {error || "ÏûëÌíàÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."}
        </p>
        <button onClick={handleBack} className="text-blue-600 hover:underline">
          ÎèåÏïÑÍ∞ÄÍ∏∞
        </button>
      </div>
    );
  }

  // ÏÜåÏú†Ïûê ÌôïÏù∏ - Îã§ÏñëÌïú ÌïÑÎìú Ï≤¥ÌÅ¨
  const isOwner =
    currentUser &&
    artwork &&
    (currentUser.id === artwork.user_id ||
      currentUser.id === artwork.user?.id ||
      currentUser.email === artwork.user?.email ||
      currentUser.id === artwork.artist?.id);

  // ÎîîÎ≤ÑÍπÖ Î°úÍ∑∏
  console.log("üîç ÏÜåÏú†Ïûê Ï≤¥ÌÅ¨:", {
    currentUser: currentUser,
    currentUserId: currentUser?.id,
    artworkUserId: artwork?.user_id,
    artworkUser: artwork?.user,
    artworkArtist: artwork?.artist,
    isOwner: isOwner,
  });

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-white">
      {/* Header */}
      <ArtworkDetailHeader
        onBack={handleBack}
        artworkTitle={artwork.title}
        showTitle={showTitleInHeader}
        isOwner={isOwner}
        artworkId={artwork.id}
        userId={currentUser?.id}
        artistId={artwork?.user_id || artwork?.user?.id || artwork?.artist?.id}
        onDelete={handleDeleteArtwork}
        onEdit={() => setShowEditDescriptionModal(true)}
      />

      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Main Artwork Info */}
        <div id="artwork-title">
          <ArtworkMainInfo
            artwork={artwork}
            onImageClick={handleMainImageClick}
          />
        </div>

        {/* History Timeline */}
        <ArtworkHistoryTimeline
          histories={histories}
          onImageClick={handleImageClick}
          onAddHistory={() => setShowAddHistoryModal(true)}
          onDeleteHistory={handleDeleteHistory}
          isOwner={isOwner}
        />
      </div>

      {/* Image Modal */}
      <ImageModal
        isOpen={showImageModal}
        imageUrl={selectedImage.url}
        imageTitle={selectedImage.title}
        imageSubtitle={selectedImage.subtitle}
        onClose={() => setShowImageModal(false)}
      />

      {/* Add History Modal */}
      <AddHistoryModal
        isOpen={showAddHistoryModal}
        onClose={() => setShowAddHistoryModal(false)}
        onSubmit={handleAddHistory}
        loading={false}
        editingHistory={editingHistory}
      />

      {/* Edit Description Modal */}
      <EditDescriptionModal
        isOpen={showEditDescriptionModal}
        onClose={() => setShowEditDescriptionModal(false)}
        onSubmit={handleUpdateDescription}
        currentData={{
          title: artwork?.title || "", // Ïù¥ Ï§Ñ Ï∂îÍ∞Ä
          description: artwork?.description || "",
          links: artwork?.links || [],
          youtube_urls: artwork?.youtube_urls || [],
        }}
        artworkTitle={artwork?.title || ""}
      />
    </div>
  );
}
